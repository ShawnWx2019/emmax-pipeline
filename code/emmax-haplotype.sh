#!/bin/bash

############################################################
#       Prj: Emmax pipeline
#       Assignment: main pipeline
#       Author: Shawn Wang
#       Date: Apr 26 2023
############################################################

# ## getopts
set -e ## 报错打断，防止一直错下去
# 
shopt -s expand_aliases
source ~/.bash_alias
# 
start_time=$(date +%s)

## 帮助内容
func(){
    echo -e "\033[32m\n-------------------------------\n\033[0m"
    echo -e "\033[32;1mEmmax pipeline . Haplotype analysis.\033[0m"
    echo -e "\033[32m\n-------------------------------\n\033[0m"
    echo -e "\033[32;1mUsage: \n\033[0m"
    echo -e "\033[35memmax-haplotype \ \n \033[31m-v [vcf] \ \n \033[31m-r [regions] \ \n \033[31m-g [genofile] \ \n \033[31m-f [famfile] \ \n \033[31m-c [colorkey] \ \n \033[31m-o [output]     \033[0m"
    echo -e "\033[32m\n-------------------------------\n\033[0m"
    echo -e "\033[32mAuthor\033[0m Shawn Wang (shawnwang2016@126.com)"
    echo -e "\033[32mDate\033[0m Tue May 16, 2023"
    echo -e "\033[32mVersion\033[0m V.0.0.0.99 beta"
    echo -e "\033[32m\n-------------------------------\n\033[0m"
    echo -e "\033[32;1mRequired parameters:\n\033[0m"
    echo -e "\033[31;3m[-v]:vcf_file\033[0m,   Only accept vcf.gz file\033[0m"
    echo -e "\033[31;3m[-r]:regions\033[0m,  target region,chr:start-end, eg:1:10000-20000\033[0m"
    echo -e "\033[31;3m[-g]:genofile\033[0m,  .gwas file generated by emmax-down\033[0m"
    echo -e "\033[31;3m[-f]:famfile\033[0m,  .fam file generated by plink\033[0m"
    echo -e "\033[31;3m[-p]:phenotype\033[0m,trait file. Sample in 1st column, trait (traits in other columns)\033[0m"
    echo -e "\033[31;3m[-c]:colorkey\033[0m,color of snp type. default is: [Missing:Heterozygous:Minor:Major = grey:blue:orange:cyan]\033[0m"
    echo -e "\033[31;3m[-o]:output\033[0m,  prefix of output filename\033[0m"
    echo -e "\033[32m\n-------------------------------\n\033[0m"
    exit -1
}


## 默认值
while getopts 'ht:v:r:g:f:p:c::o::' OPT;
do
    case $OPT in
        v) vcf=`echo "$OPTARG"`;;
        r) regions=`echo "$OPTARG"`;;
        g) genofile=`echo "$OPTARG"`;;
        f) famfile=`echo "$OPTARG"`;;
        p) phenotype=`echo "$OPTARG"`;;
        c) colorkey=`echo "$OPTARG"`;;
        o) output=`echo "$OPTARG"`;;
        h) func
           exit 1
           ;;
        ?) func
           exit 1
           ;;
    esac
done

## 设置默认参数
if [ -z "$vcf" ]; then echo -e "\033[31m\nERROR:\033[0m need [-v]:vcf parameter,   need vcf.gz file\033[0m"; exit 1; fi
if [ -z "$regions" ]; then echo -e "\033[31m\nERROR:\033[0m need [-r]:regions parameter,  target region,chr:start-end, eg:1:10000-20000\033[0m"; exit 1; fi
if [ -z "$genofile" ]; then echo -e "\033[31m\nERROR:\033[0m need [-g]:genofile parameter,   need .gwas file\033[0m"; exit 1; fi
if [ -z "$famfile" ]; then echo -e "\033[31m\nERROR:\033[0m need [-f]:famfile parameter,   need .fam file\033[0m"; exit 1; fi
if [ -z "$phenotype" ]; then echo -e "\033[31m\nERROR:\033[0m need [-p]:phenotype parameter,   need trait file\033[0m"; exit 1; fi
if [ -z "$colorkey" ]; then  colorkey="grey:blue:orange:cyan"; fi
if [ -z "$output" ]; then output="tmp"; fi
## 提示你的参数设置
echo -e "\033[32m\n=====================\033[1m \033[34mYour setting \033[0m \033[32m=====================\033[0m"
echo -e "\033[32mInput vcf file: \033[0m ${vcf}"
echo -e "\033[32mInput target region :\033[0m  ${regions}"
echo -e "\033[32mInput .gwas file :\033[0m  ${genofile}"
echo -e "\033[32mInput .fam file :\033[0m  ${famfile}"
echo -e "\033[32mInput trait file :\033[0m  ${phenotype}"
echo -e "\033[32mSNP type color key - Missing:Heterozygous:Minor: :\033[0m  ${colorkey}"
echo -e "\033[32moutput prefix :\033[0m  ${output}"
echo -e "\033[32m=========================================================\033[0m"


echo -e "\033[32m\n==================================================== \033[0m\033[34m\nStep1 extract targeted vcf .... \033[0m\n\033[32m====================================================\n\033[0m"
##> 第一步，bcftools 提取指定范围vcf文件
if [ -f ${output}.vcf.gz ] 
then
  echo -e "\033[34mSkip step1, using previous analysis results. \033[0m"
else
  bcftools filter ${vcf} --regions ${regions} -o ${output}.vcf
  bgzip ${output}.vcf
  bcftools index -t ${output}.vcf.gz
fi
  
echo -e "\033[32m\n==================================================== \033[0m\033[34m\nStep2 convert vcf to phylip .... \033[0m\n\033[32m====================================================\n\033[0m"
##> 第二步，将vcf文件转换为phylip格式

if [ -f ${output}.phy ] 
then
  echo -e "\033[34mSkip step2, using previous analysis results. \033[0m"
else
  run_pipeline.pl  -Xmx100G -importGuess  ${output}.vcf.gz -ExportPlugin -saveAs ${output}.phy -format Phylip_Inter
fi
echo -e "\033[32m\n==================================================== \033[0m\033[34m\nStep3 construct NJ tree .... \033[0m\n\033[32m====================================================\n\033[0m"
##> 第三步，通过fasttree构建进化树

if [ -f ${output}.nwk ] 
then
  echo -e "\033[34mSkip step3, using previous analysis results. \033[0m"
else
  fasttree -nt -gtr ${output}.phy >${output}.nwk
fi

echo -e "\033[32m\n==================================================== \033[0m\033[34m\nFinish! \033[0m\n\033[32m====================================================\n\033[0m"

if [ -f ${output}.rds ]
then
  echo -e "\033[34mSkip step3, using previous analysis results. \033[0m"
else
  emmax-haploheatmap -t ${output}.nwk -g ${genofile} -f ${famfile} -r ${regions} -c ${colorkey} -o ${output} -p ${phenotype}
fi
##> check running time
end_time=$(date +%s)
run_time=$((end_time - start_time))


hours=$((run_time / 3600))
minutes=$(((run_time / 60) % 60))
seconds=$((run_time % 60))

printf "\033[34mThe script took %d hours, %d minutes, and %d seconds to run.\033[0m\n" $hours $minutes $seconds